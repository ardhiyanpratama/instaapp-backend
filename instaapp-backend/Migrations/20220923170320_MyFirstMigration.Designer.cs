// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using instaapp_backend.Models;

#nullable disable

namespace instaapp_backend.Migrations
{
    [DbContext(typeof(InstaContext))]
    [Migration("20220923170320_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("instaapp_backend.Models.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<long>("PostingId")
                        .HasColumnType("bigint")
                        .HasColumnName("posting_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("UserLike")
                        .HasColumnType("boolean")
                        .HasColumnName("user_like");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id");

                    b.ToTable("like", (string)null);
                });

            modelBuilder.Entity("instaapp_backend.Models.Posting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Posts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("posts");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id");

                    b.ToTable("posting", (string)null);
                });

            modelBuilder.Entity("instaapp_backend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool?>("Iscomment")
                        .HasColumnType("boolean")
                        .HasColumnName("iscomment");

                    b.Property<bool?>("Islike")
                        .HasColumnType("boolean")
                        .HasColumnName("islike");

                    b.Property<bool?>("Ispost")
                        .HasColumnType("boolean")
                        .HasColumnName("ispost");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("character(16)")
                        .HasColumnName("mobile_number")
                        .HasDefaultValueSql("16")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("instaapp_backend.Models.Like", b =>
                {
                    b.HasOne("instaapp_backend.Models.Posting", "IdNavigation")
                        .WithOne("Like")
                        .HasForeignKey("instaapp_backend.Models.Like", "Id")
                        .IsRequired()
                        .HasConstraintName("like_fk_1");

                    b.HasOne("instaapp_backend.Models.User", "Id1")
                        .WithOne("Like")
                        .HasForeignKey("instaapp_backend.Models.Like", "Id")
                        .IsRequired()
                        .HasConstraintName("like_fk");

                    b.Navigation("Id1");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("instaapp_backend.Models.Posting", b =>
                {
                    b.HasOne("instaapp_backend.Models.User", "IdNavigation")
                        .WithOne("Posting")
                        .HasForeignKey("instaapp_backend.Models.Posting", "Id")
                        .IsRequired()
                        .HasConstraintName("posting_fk");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("instaapp_backend.Models.Posting", b =>
                {
                    b.Navigation("Like");
                });

            modelBuilder.Entity("instaapp_backend.Models.User", b =>
                {
                    b.Navigation("Like");

                    b.Navigation("Posting");
                });
#pragma warning restore 612, 618
        }
    }
}
